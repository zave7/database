Git의 영역

1. Working Directory(작업영역)
실제 프로젝트 디렉토리, git 이력과 관련된 정보가 저장되어있는 .git을 제외한 모든 영역을 말함
실제 코드를 수정하고 추가하는 변경이 이루어지는 영역

2. Repository(저장소)
파일이나 폴더를 변경 이력별로 저장해 두는 곳
.git 디렉토리 내에 존재함
Local Repository : 내 PC에 파일이 저장되는 개인 저장소
Remote Repository : 파일이 원격 저장소 전용 서버에서 관리되며 여러 사람이 함께 공유하기 위한 저장소

3. Index
Working Directory 에서 Repository로 정보가 저장되기 전 준비 영역
파일 상태를 기록, 스테이징 한다고도 표현함, Staging Area로 불리기도함
.git/index 파일로 관리됨.
git add 명령어로 Working Directory 에서 Index 영역으로 정보가 저장됨
git commit 명령어로 Index 영역에서 Repository로 정보가 저장됨

4. Stash
일반적인 Working Directory > Index > Repository 로 이루어지는 영역과는 다른 별개의 임시영역
임시적으로 작업사항을 저장해놓고 나중에 꺼내올 수 있다.
------------------------------------------------------------------------------------------------------------------
GIT command

git init
- .git 디렉토리를 생성하고 현재 디렉토리를 버전관리 한다

·······························

git rm -r .git
- .git 폴더가 삭제되며 Git 로컬 저장소 지정을 해제한다

·······························

git config --global core.autocrlf true
- 윈도우에서 warning: LF will be replaced by CRLF 오류 시

·······························

git status
- 변화 상태 확인 tracked, untracked, modified 등등

·······························

git add [filename]
- 해당 파일을 tracked 하는 명령
- 파일이 수정되어서 commit 하기 전에도 해야한다 (커밋 대기상태에 들어간다, 스테이징)

git add -p
- modified된 파일의 수정 부분을 단위별로 나누어서 추가할지 안할지 선택하게 한다
- 변경사항 하나의 단위를 hunk라고 한다.
- hunk 단위로 추가할지 말지 선택한다.
- ?를 입력하면 각 명령어를 볼 수 있다
- y 는 해당 hunk를 스테이징에 추가하고, n 은 추가하지 않고 다음 hunk를 보여준다.
- q 를 입력하면 add 과정을 종료한다.

·······························

git config --global user.name "name"
git config --global user.email email
- 작업하는 개발자의 정보 명시

·······························

git commit 
- 커밋 메세지를 입력하는 창으로  

git commit -v
- 커밋하는 변경사항을 한번 더 보여준다
- 커밋 메세지를 입력하는 화면 아래 코드 diff

git commit -a
- 스테이징된 모든 파일을 커밋

git commit -m "comment"
- 커밋 메세지를 한번에 입력

·······························

git log
- 커밋의 역사 확인
- 나갈 때는 q

git log -p
- 각각의 커밋과 커밋 사이에 소스상의 차이점 확인
※ 왜 깃은 add 과정을 거치게 하는지
- 작업한 내용중 commit을 할 것들만 추려서 선택적 커밋 가능
※ stage area -> 커밋 대기상태, 스테이지 위에 있는 파일들이 버전이 된다
※ repository 저장소

git log [비교브랜치1]..[비교브랜치2]
- 2에는 없고 1에 있는 커밋을 보여줌

git log --branch --graph --decorate --oneline
- 로그에 모든 브랜치를 표시하고, 그래프로 표현하고, 브랜치 명을 표시하고, 한줄로 표시

·······························

git diff
- Working Directory와 index 영역 사이의 변경사항 표시
- add 가 안된 상태에서 변경점이 확인된다

git diff --cached
- index영역과 Repository 영역을 비교하여 변경사항을 표시
- add 가 된 상태에서 변경점이 확인된다

git diff [branch-name1] [branch-name2]
- 로컬의 브랜치간 코드 비교

git diff [branch-name] [origin/branch-name]
- 로컬 브랜치와 원격 브랜치간의 비교

git diff [커밋 해시아이디] [커밋해시아이디]
- 커밋끼리 비교

git diff [비교대상1]..[비교대상2]
- 1과 2의 차이점 비교 ..이 들어간다

·······························

git branch
- 로컬 브랜치의 목록 확인

git branch [branch-name]
- 로컬 브랜치 생성

git branch -d [branch-name]
- 브랜치 삭제

git branch -D [branch-name]
- 병합하지 않은 브랜치를 강제 삭제

·······························

git checkout branch-name
- 해당 브랜치로 전환(체크아웃)

git checkout -b branch-name
- 브랜치를 생성하고 전환까지

·······························

git merge branch-name
- 현재 브랜치에 해당 브랜치를 병합

·······························

git remote -v
- 현재 원격저장소로 설정된 목록 확인

git remote show [remote-name]
- 리모트 저장소의 구체적인 정보를 확인
- 브랜치명을 생략하고 git push 명령을 실행 할 때 어떤 브랜치가 어떤 브랜치로 
push 되는지도 보여준다

git remote rename test1 test2
- 리모트 이름을 test1 에서 test2 로 변경

git remote rm origin
- origin 리모트 저장소 삭제

·······························

git push origin master
- 원격 저장소에 푸쉬 (origin에 master 브랜치로)

·······························

git clone [저장소주소]
- 클라이언트 상에 아무것도 없을 때 서버의 프로젝트를 내려받기

·······························

git fetch [remote-name]
- 로컬에는 없지만, 리모트 저장소에는 있는 데이터를 모두 가져온다
- 자동으로 머지하지 않는다. 그래서 수동으로 해줘야 한다.

·······························

git rm [Filename]
- 원격 저장소와 로컬 저장소에 있는 파일을 삭제한다

git rm --cached [Filename]
- 원격 저장소에 있는 파일만 삭제한다.

git rm --cached .idea/modules.xml
- .idea/modules.xml 파일 삭제

git rm --cached -r .idea/ 
- .idea 폴더 하위의 모든 파일 삭제

·······························

git config --global gui.encoding utf-8
- gitk 한글이 깨지는 경우

git config core.quotepath false
- 이 설정은 일반적이지 않은 문자를 탈출문자로 처리하는 기능수행
그래서 한글 앞에 탈출 문자를 붙인 탓에 이런 문제가 발생





























